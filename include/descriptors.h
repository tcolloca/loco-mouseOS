#ifndef _descriptors_#define _descriptors_#include "defs.h"/* Access Privileges for Segments */#define ACS_PRESENT     0x80            /* Segment present in memory */#define ACS_CSEG        0x18            /* Code segment */#define ACS_DSEG        0x10            /* Data segment */#define ACS_READ        0x02            /* Read-only segment */#define ACS_WRITE       0x02            /* Writeable segment */#define ACS_IDT         ACS_DSEG		/* IDT Segment */#define ACS_INT_386 	0x0E			/* Interrupt GATE 32 bits */#define ACS_INT         ( ACS_PRESENT | ACS_INT_386 )#define ACS_CODE        (ACS_PRESENT | ACS_CSEG | ACS_READ)#define ACS_DATA        (ACS_PRESENT | ACS_DSEG | ACS_WRITE)#define ACS_STACK       (ACS_PRESENT | ACS_DSEG | ACS_WRITE)#pragma pack 			(1) 		/* 1-byte alignment for the following structs *//* Segment Descriptor */typedef struct {  word limit,       base_l;  byte base_m,       access,       attribs,       base_h;} DESCR_SEG;/* Interrupt Descriptor */typedef struct {  word      offset_l,            selector;  byte      cero,            access;  word	    offset_h;} DESCR_INT;/* IDTR  */typedef struct {  word  limit;  dword base;} IDTR; void setup_IDT_entry (DESCR_INT *item, byte selector, dword offset, byte access, byte cero);#endif 